openapi: 3.0.0
info:
  version: 3.1.0
  title: Energy Offers Manager
  description: Energy Offers Manager Application API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://13.39.166.13:3000
    description: Prod server URL (ECS)
  - url: http://localhost:3000
    description: Local server
tags:
  - name: Parks
    description: API for CRUD parks
  - name: Offers
    description: APIs for CRUD offers
  - name: Markets
    description: APIs for CRUD markets
paths:
  /parks:
    post:
      tags:
        - Parks
      summary: 'Create new park in system. For park type: 1 -> eolian, 2 -> solar and 3 -> hydraulics'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Park'
      responses:
        '200':
          description: New park is created
        '500':
          description: Error creating the park
  /offers:
    post:
      tags:
        - Offers
      summary: 'Create new offer in system.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        '200':
          description: New park is created
        '500':
          description: Error creating the offer
  /markets:
    post:
      tags:
        - Markets
      summary: 'Create new market in system. For market type: 1 -> primary, 2 -> secondary and 3 -> rapid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Market"
      responses:
        '200':
          description: New market is created
        '500':
          description: Error creating the market
    get:
      tags:
        - Markets
      summary: 'Get all offers of each market. For market type: 1 -> primary, 2 -> secondary and 3 -> rapid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketsWithOffers"
  /markets/{id}/parks:
    get:
      tags:
        - Markets
      summary: (TODO) Get all parks of a given market
      parameters:
        - name: id
          in: path
          description: Market ID
          required: true
          schema:
            type: integer
            format: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketWithParks"

components:
  schemas:
    Park:
      required:
        - name
        - id
      properties:
        id:
          type: integer
          uniqueItems: true
        name:
          type: string
        address:
          type: string
        type_id:
          type: integer
        timeBlocks:
          $ref: "#/components/schemas/TimeBlocks"
    Parks:
      type: array
      items:
        $ref: "#/components/schemas/Park"
    TimeBlock:
      required:
        - nb_hours
        - energy_quantity
        - min_price
      properties:
        nb_hours:
          type: integer
        energy_quantity:
          type: number
        min_price:
          type: number
    TimeBlocks:
      type: array
      items:
        $ref: "#/components/schemas/TimeBlock"
    Offer:
      required:
        - price
        - id
        - energy_quantity
        - market_id
      properties:
        id:
          type: string
          uniqueItems: true
        market_id:
          type: integer
        price:
          type: number
        energy_quantity:
          type: number
        timeBlocks:
          type: array
          items:
            type: integer
    Offers:
      type: array
      items:
        $ref: "#/components/schemas/Offer"
    Market:
      required:
        - type_id
        - id
      properties:
        id:
          type: integer
          uniqueItems: true
        energy_reserve_min:
          type: number
        energy_reserve_max:
          type: number
        type_id:
          type: integer
        type_name:
          type: string
    Markets:
      type: array
      items:
        $ref: "#/components/schemas/Market"
    MarketWithParks:
      required:
        - type_id
        - id
      properties:
        id:
          type: integer
          uniqueItems: true
        energy_reserve_min:
          type: number
        energy_reserve_max:
          type: number
        type_id:
          type: integer
        parks:
          $ref: "#/components/schemas/Parks"
    MarketWithOffers:
      required:
        - type_id
        - id
      properties:
        id:
          type: integer
          uniqueItems: true
        energy_reserve_min:
          type: number
        energy_reserve_max:
          type: number
        offers:
          $ref: "#/components/schemas/Offers"
    MarketsWithOffers:
      type: array
      items:
        $ref: "#/components/schemas/MarketWithOffers"

